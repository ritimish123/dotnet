Date:20/dec/2021
Assignment 1:

Question 1: Difference Between Convert, Parse and TryParse Function.
Answer 1: Differences :-
Parse : A method in c# that converts a string representation to a corresponding numerical integer value.
this method returns the converted number.
syntax is int.Parse(string s);
it will give an ArgumentNullException.
e.g.: string input1 = "101";  
      Console.WriteLine("int.Parse:(String to integer) : "+int.Parse(input1));
output: int.Parse:(String to integer) : 101

Convert : A method in c# that converts a specified string representation of a number to an eqivalent 32 bit signed integer.
Syntax is Convert.ToInt32(string s);
it will give zero.
e.g.: bool input00 = false;  
      Console.WriteLine("Convert.ToInt32:(bool to integer) : " + Convert.ToInt32(input00));
output: Convert.ToInt32:(bool to integer) : 0 


TryParse : the TryParse method returns a boolean value that indicates whether the conversion succeeded, and 
returns the converted number in an out parameter. 
If the string isn't in a valid format, TryParse returns false.
e.g.: int defaultout;  
      bool input000 = false;  
      int .TryParse(input000 .ToString(), out defaultout);  
      Console .WriteLine("int.TryParse:(bool to integer) : " + defaultout);
output: int.TryParse:(bool to integer) : 0 

Question 2: Difference Between for loop and for each loop in c#.
Answer 2:  The for loop executes a statement or a block of statements repeatedly until a specified expression evaluates to false. 
 
There is need to specify the loop bounds (minimum or maximum).
Following is a code example of a simple for loop that starts 0 till <= 5. 
int j = 0;  
for (int i = 1; i <= 5; i++)  
{  
   j = j + i ;  
}  

The foreach statement repeats a group of embedded statements for each element in an array or an object collection. 
You do not need to specify the loop bounds minimum or maximum. 
The following code loops through all items of an array.
int j = 0;  
int[] myArr = new int[] { 0, 1, 2, 3, 5, 8, 13 };  
foreach (int i in myArr )  
{  
   j = j + i ;  
}  
foreach: Treats everything as a collection and reduces the performance. 
foreach creates an instance of an enumerator (returned from GetEnumerator()) and that enumerator also keeps state throughout the course of the foreach loop. It then repeatedly calls for the Next() object on the enumerator and runs your code for each object it returns.
Using for loop we can iterate a collection in both direction, 
that is from index 0 to 9 and from 9 to 0. But using for-each loop, the iteration is possible in forward direction only.
In variable declaration, foreach has five variable declarations 
(three Int32 integers and two arrays of Int32) while for has only three (two Int32 integers and one Int32 array).
When it goes to loop through, foreach copies the current array to a new one for the operation. While for doesn't care of that part. 



Question 3: Different datatype and its minimum and maximum values that can be stored.
Answer 3: 
DATA_TYPE   MINIMUM_VALUE                 MAXIMUM_VALUE
byte	        0                             255	
sbyte   	-128                          127	
short		-32,768                      32,767	
ushort		0                            65,535	
int	   -2,147,483,648                 2,147,483,647                                                	
uint	       0                          4,294,967,295U
long	-9,223,372,036,854,775,808        9,223,372,036,854,775,807L
ulong		0                         18,446,744,073,709,551,615	ul
float		-3.402823e38              3.402823e38	f
double		-1.79769313486232e308     1.79769313486232e308	d
char	Any valid character, e.g. a,*, \x0058 (hex), or\u0058 (Unicode)	
bool	     True or False	
object	Base type of all other types.		
string	A sequence of Unicode characters		
DateTime	Represents date and time	0:00:00am 1/1/01   11:59:59pm 12/31/9999	

